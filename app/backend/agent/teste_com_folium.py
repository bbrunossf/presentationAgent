# -*- coding: utf-8 -*-
"""Teste com Folium.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRM70zsIjQeYDIeeF4oSneo-up_kNWvo

# Install e Import
"""

!pip install -q folium geopy exifread pandas

import os
import exifread
from geopy.geocoders import Nominatim
import folium
from folium.plugins import TimestampedGeoJson
from datetime import datetime
import pandas as pd

"""# Setup"""

# Configurações iniciais
PASTA_FOTOS = "/content/sample_data/fotos_obra"  # Pasta com as fotos (JPEG com EXIF)
CORES_OBRAS = {
    "Obra A": "red",
    "Obra B": "blue",
    "Obra C": "green"
}

# Banco de dados fictício de obras (endereço aproximado)
BANCO_OBRAS = {
    "Obra A": "Av. Paulista, 1000, São Paulo",
    "Obra B": "Rua Oscar Freire, 200, São Paulo",
    "Obra C": "Praça da Sé, 1, São Paulo"
}

"""# Funções"""

# Função para extrair coordenadas GPS do EXIF
def extrair_coordenadas(caminho_foto):
    with open(caminho_foto, 'rb') as f:
        tags = exifread.process_file(f)
        if 'GPS GPSLatitude' in tags and 'GPS GPSLongitude' in tags:
            lat = tags['GPS GPSLatitude']
            lon = tags['GPS GPSLongitude']
            # Converter coordenadas EXIF para graus decimais
            print(lat.values)
            lat_dec = float(lat.values[0]) + float(lat.values[1])/60 + float(lat.values[2])/3600
            lon_dec = float(lon.values[0]) + float(lon.values[1])/60 + float(lon.values[2])/3600
            return -lat_dec, -lon_dec
    return None, None

# Função para associar foto à obra mais próxima (geocodificação reversa)
def associar_a_obra(lat, lon):
    geolocator = Nominatim(user_agent="vistoria_obra")
    try:
        location = geolocator.reverse(f"{lat}, {lon}", exactly_one=True)
        endereco = location.address
        for obra, endereco_obra in BANCO_OBRAS.items():
            if endereco_obra.split(",")[0] in endereco:  # Compara nome da rua
                return obra
        return "Desconhecido"
    except:
        return "Desconhecido"

"""# Execução"""

# Processar todas as fotos na pasta
dados_fotos = []
for foto in os.listdir(PASTA_FOTOS):
    if foto.lower().endswith(('.jpg', '.jpeg')):
        caminho = os.path.join(PASTA_FOTOS, foto)
        lat, lon = extrair_coordenadas(caminho)
        if lat and lon:
            obra = associar_a_obra(lat, lon)
            hora = datetime.fromtimestamp(os.path.getmtime(caminho)).strftime('%Y-%m-%d %H:%M:%S')
            dados_fotos.append({
                "foto": foto,
                "caminho": caminho,
                "lat": lat,
                "lon": lon,
                "obra": obra,
                "hora": hora
            })

#debug
dados_fotos

# Criar DataFrame
df = pd.DataFrame(dados_fotos)

df

# Criar mapa base (centrado na média das coordenadas)
mapa = folium.Map(
    location=[df['lat'].mean(), df['lon'].mean()],
    zoom_start=13,
    tiles="cartodbpositron"
)

# Adicionar marcadores coloridos por obra
for idx, row in df.iterrows():
    cor = CORES_OBRAS.get(row['obra'], 'gray')
    popup = folium.Popup(f"""
        <b>Obra:</b> {row['obra']}<br>
        <b>Hora:</b> {row['hora']}<br>
        <img src="{row['caminho']}" width="200px">
    """, max_width=250)

    folium.Marker(
        location=[row['lat'], row['lon']],
        popup=popup,
        icon=folium.Icon(color=cor, icon="info-sign"),
        tooltip=f"{row['obra']} - {row['hora']}"
    ).add_to(mapa)

# Adicionar linha do tempo animada (TimestampedGeoJson)
features = []
for idx, row in df.sort_values('hora').iterrows():
    features.append({
        'type': 'Feature',
        'geometry': {
            'type': 'Point',
            'coordinates': [row['lon'], row['lat']]
        },
        'properties': {
            'time': row['hora'],
            'style': {'color': CORES_OBRAS.get(row['obra'], 'gray')},
            'icon': 'marker',
            'popup': f"<img src='{row['caminho']}' width='150px'>",
            'obra': row['obra']
        }
    })

TimestampedGeoJson(
    {'type': 'FeatureCollection', 'features': features},
    period='PT10M',  # Intervalo de animação (10 minutos)
    add_last_point=True,
    auto_play=True,
    loop=False,
    max_speed=10,
    loop_button=True,
    date_options="YYYY/MM/DD HH:mm:ss",
    time_slider_drag_update=True
).add_to(mapa)

# Adicionar linha de rota
folium.PolyLine(
    df.sort_values('hora')[['lat', 'lon']].values,
    color='gray',
    dash_array='5',
    weight=2
).add_to(mapa)

# Salvar mapa
mapa.save("mapa_vistoria_interativo.html")
print("Mapa gerado: mapa_vistoria_interativo.html")

mapa

